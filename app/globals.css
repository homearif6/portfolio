@import 'tailwindcss';
@plugin "@tailwindcss/typography";

@custom-variant dark (&:is(.dark *));

@theme {
    --breakpoint-*: initial;
    --breakpoint-sm: 374px;
    --breakpoint-md: 799px;
    --breakpoint-lg: 1199px;

    --font-pixelify-sans: var(--font-pixelify-sans);

    --color-dark-50: #dbdbdb;
    --color-dark-100: #cfcfcf;
    --color-dark-200: #b8b8b8;
    --color-dark-300: #969696;
    --color-dark-400: #6e6e6e;
    --color-dark-500: #545454;
    --color-dark-600: #424242;
    --color-dark-700: #363636;
    --color-dark-800: #2b2b2b;
    --color-dark-900: #1a1a1a;
    --color-dark-950: #0d0d0d;
}

/*
  The default border color has changed to `currentColor` in Tailwind CSS v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with Tailwind CSS v3.

  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/
@layer base {
    *,
    ::after,
    ::before,
    ::backdrop,
    ::file-selector-button {
        border-color: var(--color-gray-200, currentColor);
    }
}

@keyframes playing {
    0% {
        height: 4px;
    }
    50% {
        height: 16px;
    }
    100% {
        height: 4px;
    }
}

/* Visualizer animations with different speeds */
@keyframes visualizer-1 {
    0%, 100% { height: 20%; }
    50% { height: 80%; }
}

@keyframes visualizer-2 {
    0%, 100% { height: 30%; }
    50% { height: 90%; }
}

@keyframes visualizer-3 {
    0%, 100% { height: 25%; }
    50% { height: 70%; }
}

@keyframes visualizer-4 {
    0%, 100% { height: 40%; }
    50% { height: 100%; }
}

@keyframes visualizer-5 {
    0%, 100% { height: 15%; }
    50% { height: 85%; }
}

@keyframes visualizer-6 {
    0%, 100% { height: 35%; }
    50% { height: 75%; }
}

@keyframes visualizer-7 {
    0%, 100% { height: 20%; }
    50% { height: 95%; }
}

@keyframes visualizer-8 {
    0%, 100% { height: 45%; }
    50% { height: 65%; }
}

/* Visualizer classes */
.visualizer-bar-1 { animation: visualizer-1 0.8s ease-in-out infinite; }
.visualizer-bar-2 { animation: visualizer-2 0.6s ease-in-out infinite; }
.visualizer-bar-3 { animation: visualizer-3 1.2s ease-in-out infinite; }
.visualizer-bar-4 { animation: visualizer-4 0.9s ease-in-out infinite; }
.visualizer-bar-5 { animation: visualizer-5 0.7s ease-in-out infinite; }
.visualizer-bar-6 { animation: visualizer-6 1.1s ease-in-out infinite; }
.visualizer-bar-7 { animation: visualizer-7 0.5s ease-in-out infinite; }
.visualizer-bar-8 { animation: visualizer-8 1.0s ease-in-out infinite; }

/* React Grid Layout */
.react-grid-layout {
    @apply relative transition-[height] duration-200 ease-in-out;

    .react-grid-item {
        @apply transition-[left,_top,_width,_height] delay-0 duration-500 ease-in-out;

        img {
            @apply pointer-events-none select-none;
        }

        &.rezising {
            @apply z-1 transition-none will-change-[width,_height];
        }

        &.react-draggable-dragging {
            @apply z-3 transition-none will-change-transform;
        }

        &.dropping {
            @apply invisible;
        }

        &.react-grid-placeholder {
            @apply z-2 rounded-3xl bg-black opacity-5 duration-100 select-none;

            html.dark & {
                @apply bg-white opacity-5;
            }
        }
    }
}

/* Mapbox */
.mapboxgl-control-container {
    @apply hidden;
}

div[mapboxgl-children] {
    @apply absolute inset-0;
}

/* MDX */
.prose .anchor {
    @apply invisible absolute -ml-6 pr-2 no-underline;

    &:after {
        @apply text-neutral-300 content-['#'] dark:text-neutral-700;
    }
}

.anchor:hover {
    @apply visible;
}

.prose *:hover > .anchor {
    @apply visible;
}

/* Custom gradient for radial effect */
.bg-gradient-radial {
    background: radial-gradient(circle, var(--tw-gradient-stops));
}